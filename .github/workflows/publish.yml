name: Build, Test, and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-test-and-publish:
    runs-on: ubuntu-latest
    name: Build, Test, and Publish LogicTools

    env:
      POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          version: "1.8.2"

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        id: cache-virtualenv
        with:
          path: .venv
          key: venv-${{ hashFiles('pyproject.toml', 'poetry.lock') }}
          restore-keys: |
            venv-

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root --with dev
          poetry check

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=logictools --cov-branch --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          verbose: true

      - name: Build package
        run: |
          poetry build

      - name: Verify PyPI token
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "::error::PyPI token not found in secrets"
            exit 1
          fi
          echo "âœ… PyPI token is set"

      - name: Clean previous builds (if any)
        run: |
          rm -rf dist/

      - name: Publish to PyPI
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          poetry publish --build --no-interaction --repository pypi
  